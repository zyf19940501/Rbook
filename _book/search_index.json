[["database.html", "8 database", " 8 database 我们作为数据分析师有必要和数据库打交道吗？实际工作中，数据量达到一定的程度，当你开始需要使用 Excel PowerPivot 做数据透视表1时，你就必须开始和数据库打交道，因为这时数据源超过Excel上限了，已经没办法承接。 现实中的数据大部分都是脏数据，我们需要从数据库获取数据并清洗，再使用R、 Excel 、Power BI、tebleau等工具连接使用。那我们使用什么工具完成ETL2呢？经过实践发现，使用R语言完成该过程对我们个人用户来说足够使用。 即使你暂时没有接触使用数据库，也建议你未来用数据库存储数据，尤其是当有一定数据量时;在我最开始接触数据时，数据一般保存在Excel中,那时候数据量大概在50万行左右，当表格中sumifs等公式较多时，Excel表格将会很卡顿，甚至发送崩溃。当需要大批量vlookup时，在Excel中操作也是一件很痛苦的事情。 目前工作中打交道数据库主要是MSSQL,Oracle,MySQL等，R中与数据库交互的包主要有odbc,DBI,RODBC,RMySQL,ROracle等包。本文主要从以上数据库介绍记录“R与数据库的连接交互”，主要分为： 安装 SQL Server 数据库 odbc 包介绍 DBI 包介绍 其它R包介绍 与数据库交互常见问题 dbplyr 包介绍 参考资料 DBI库在查询或上传工作中效率比RODBC高,特别数据量较大时,上传效率差异巨大,具体差异请点击查看详情。所以建议采用DBI包，但是RODBC对中文支持友好，在练习阶段可以尝试使用，加深印象。 RSQLite是练习使用R中的数据库的最简单方法，因为程序包本身包含SQLite，无需任何外部软件。 PowerPivot 是一种数据建模技术，用于创建数据模型，建立关系，以及创建计算。 可使用 PowerPivot 处理大型数据集，构建广泛的关系，以及创建复杂（或简单）的计算，这些操作全部在高性能环境中和所你熟悉的 Excel 内执行。↩︎ Extract-Transform-Load,将数据从来源端经过抽取（extract）、转换（transform）、加载（load）至目的端的过程。↩︎ "],["database-install.html", "8.1 安装数据库", " 8.1 安装数据库 如果暂时没有数据库使用经验，如果是使用Windows系统，直接去微软官网下载安装数据库即可。如果决定用R做数据分析相关工作，尤其时商业环境下，使用数据库有较强的必要性。安装数据库后，利用数据库做数据分析的练习测试也是不错的体验,另外也可以积累ETL相关经验。 仅简单介绍 MS SQL Server 安装 Win环境下安装 MS下载，选择开发版或精简版(Developer、Express)其中一个版本下载即可。 数据库下载 成功下载后，按照提示一步步确认即可安装成功。另外使用SSMS工具，微软配套的MS SQL SERVER数据库链接工具连接数据库。至于详细的数据库配置尤其是远程连接、账户等信息请自行查阅相关资料。 Linux环境下安装 官网安装指南 以下用于 SQL Server 2019 的命令指向 Ubuntu 20.04 存储库。 如果使用的是 Ubuntu 18.04 或 16.04，请将以下路径更改为 /ubuntu/18.04/ 或 /ubuntu/16.04/，而不是 /ubuntu/20.04/。 # 导入公共存储库的密钥 wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - # 为 SQL Server 2019 注册 Microsoft SQL Server Ubuntu 存储库 sudo add-apt-repository &quot;$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)&quot; # sudo add-apt-repository &quot;$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)&quot; # 安装 SQL Server sudo apt-get update sudo apt-get install -y mssql-server # 验证服务是否运行 systemctl status mssql-server --no-pager 至于其他安装如sql server 命令行工具请查阅官网安装。 接下来我们就R语言与数据库的交互包展开介绍。 "],["database-odbc-package.html", "8.2 odbc包", " 8.2 odbc包 官方说明:The goal of the odbc package is to provide a DBI-compliant interface to Open Database Connectivity (ODBC) drivers. This allows for an efficient, easy to setup connection to any database with ODBC drivers available, including SQL Server, Oracle, MySQL, PostgreSQL, SQLite and others. The implementation builds on the nanodbc C++ library。 odbc可以运用于包括(SQL Server, Oracle, MySQL,PostgreSQL,SQLite)等odbc驱动程序于DBI兼容的接口，相比起来DBI包适用范围更广。 odbc项目地址 8.2.1 安装包 Windows Windows与ODBC库捆绑在一起，但是每个数据库的驱动程序需要单独安装。windows系统上可以通过以下命令直接安装。 #安装包 install.packages(&#39;odbc&#39;) 其它系统 其它系统在安装前需要安装依赖环境，如下所示: # Macos brew install unixodbc # Debian /Ubuntu apt-get install unixodbc unixodbc-dev 8.2.2 驱动安装 由于Win系统绑定ODBC库，不需要安装依赖环境即可正常安装使用R包odbc，其它系统经过上面依赖环境安装，现在系统已经能正常安装odbc包。 最后通过odbc::odbcListDrivers()查看系统上是否存在可用驱动程序。 查看可用系统可用驱动： head(odbc::odbcListDrivers()) #&gt; name attribute value #&gt; 1 SQL Server APILevel 2 #&gt; 2 SQL Server ConnectFunctions YYY #&gt; 3 SQL Server CPTimeout 60 #&gt; 4 SQL Server DriverODBCVer 03.50 #&gt; 5 SQL Server FileUsage 0 #&gt; 6 SQL Server SQLLevel 1 1.Windows 默认情况下，win系统即使不安装也可使用驱动“SQL Server,”如下所示： win-drivers 如果想要安装最新的SQL Server驱动，该如何安装呢?具体安装教程请查看微软安装说明 win系统最新的SQL Server驱动ODBC Driver 17 for SQL Server下载地址 其它系统上如果安装sql server驱动请参照安装说明 2.Macos Macos安装驱动 brew install unixodbc # Microsoft SQL Server ODBC Drivers (Recommended) brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release brew update brew install msodbcsql17 mssql-tools 成功安装后如下所示: mac-odbcdriver 8.2.3 连接数据库 连接数据库需要注意时区、编码，尤其是涉及到时间时区时如果设置有误，可能导致时间数据错误。当你在Win系统上连接Sql Server时，如果你使用的数据库是中文环境时，设置encoding参数中文将不会乱码。如果是linux上通过odbc连接SqlServer,一般情况下可以不用设置编码，另外设置encoding为gbk会报错。 数据库连接有几种方式，详情请参照数据库连接字符串,我们以SQL Server2019数据库，驱动ODBC Driver 17 for SQL Server举例。 1.标准模式 连接字符串 Driver={ODBC Driver 17 for SQL Server};Server=myServerAddress;Database=myDataBase;UID=myUsername;PWD=myPassword; 参数形式: con &lt;- odbc::dbConnect(drv=odbc(),driver=&quot;ODBC Driver 17 for SQL Server&quot;,server=&#39;172.16.88.2&#39;,database=&#39;spb&#39;,uid=&#39;zhongyf&#39;,pwd=&#39;Zyf123456&#39;,encoding=&#39;UTF-8&#39;,timezone=&quot;Asia/Shanghai&quot;) 字符串形式： con &lt;- odbc::dbConnect(drv = odbc(),.connection_string=&#39;Driver={ODBC Driver 17 for SQL Server};Server=172.16.88.2;Database=spb;UID=zhongyf;PWD=Zyf123456;&#39;,encoding=&#39;UTF-8&#39;,timezone=&quot;Asia/Shanghai&quot;) 2.信任连接 通过windows身份认证连接，通过数据库管理员配置相关账户权限即可。 Driver={ODBC Driver 17 for SQL Server};Server=myServerAddress;Database=myDataBase;Trusted_Connection=yes; library(odbc) con &lt;- odbc::dbConnect(odbc(), Driver = &quot;SQL Server&quot;, Server = &quot;Vega&quot;, Database = &quot;ghzy&quot;, Trusted_Connection = &quot;True&quot; ) 3.连接SQL Server实例3 Driver={ODBC Driver 17 for SQL Server};Server=serverName\\instanceName; Database=myDataBase;Trusted_Connection=yes; 4.非标准端口 SQL Server数据库的默认端口是1433，连接非标端口字符串如下所示： Driver={ODBC Driver 17 for SQL Server};Server=myServerName,myPortNumber;Database=myDataBase;UID=myUsername;PWD=myPassword; 通过配置DSN也可连接数据库，但是这样写的脚本在同事间分享不方便，故不推荐。 win10开始–&gt;运行 打开ODBC数据源(64) 配置。 odbc-dsn con &lt;- dbConnect(odbc::odbc(), dsn=&quot;ghzy&quot;) dbGetInfo(con) #查看连接信息 $dbname [1] &quot;spb&quot; $dbms.name [1] &quot;Microsoft SQL Server&quot; $db.version [1] &quot;12.00.5203&quot; $username [1] &quot;dbo&quot; $host [1] &quot;&quot; $port [1] &quot;&quot; $sourcename [1] &quot;ghzy&quot; $servername [1] &quot;personalSQL&quot; $drivername [1] &quot;msodbcsql17.dll&quot; $odbc.version [1] &quot;03.80.0000&quot; $driver.version [1] &quot;17.05.0002&quot; $odbcdriver.version [1] &quot;03.80&quot; $supports.transactions [1] TRUE $getdata.extensions.any_column [1] FALSE $getdata.extensions.any_order [1] FALSE attr(,&quot;class&quot;) [1] &quot;Microsoft SQL Server&quot; &quot;driver_info&quot; &quot;list&quot; 8.2.4 读写数据库 1.查询 odbc::dbGetQuery()函数执行sql语句并返回数据 dt &lt;- odbc::dbGetQuery(con,&#39;select * from DT&#39;) head(dt) 2.写入数据库 odbc::dbWriteTable(con,name = &#39;表名&#39;,value = dt,overwrite = T ) # 是否覆盖 odbc::dbWriteTable(con,name = &#39;表名&#39;,value = dt,append = T ) # 是否追加 由于odbc包的函数都是DBI中一些函数的实现，我们将其它的一些函数放在接下来的DBI包中讲解。 综上，我们使用odbc包主要是作为连接开放式数据库(odbc)中介使用。 在一台计算机上可以安装多个SQL Server,每个SQL Server就是一个实例，实例分为默认实例和命令实例。↩︎ "],["database-DBI-package.html", "8.3 DBI包", " 8.3 DBI包 R包DBI将与DBMS4的连接分为“前端”和“后端”，DBI定义了一个由DBI后端实现的接口,接口定义了一些类和方法,支持以下一些操作： 连接/断开与DBMS的连接 在DBMS中创建和执行语句 从语句中提取结果 通过DBI可以连接大部分主流关系型数据库，如:PostgreSQL,SQL Server,Oralce,MySQL,SQLite。 DBI介绍 8.3.1 安装 从CRAN安装发行的DBI版本： install.packages(&#39;DBI&#39;) 从Github安装开发的DBI版本： # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;r-dbi/DBI&quot;) 8.3.2 连接数据库 连接MS SQL SERVER 通过以下代码即可连接微软的sql server,服务器172.16.88.2(即IP地址)的数据库，成功连接后即可与数据库交互。 library(DBI) con &lt;- dbConnect( drv = odbc::odbc(), Driver = &quot;SQL Server&quot;, server = &quot;172.16.88.2&quot;, database = &quot;spb&quot;, uid = &quot;zhongyf&quot;, pwd = &quot;Zyf123456&quot; ) 查询数据库编码方式,从而选择连接数据库时相应的编码方式。 con &lt;- dbConnect( drv = odbc::odbc(), Driver = &quot;ODBC Driver 17 for SQL Server&quot;, server = &quot;172.16.88.2&quot;, database = &quot;spb&quot;, uid = &quot;zhongyf&quot;, pwd = &quot;Zyf123456&quot; ) #查看编码是否是936 代表中文简体 sql &lt;- &quot;SELECT COLLATIONPROPERTY( &#39;chinese_prc_ci_as&#39;, &#39;codepage&#39; )&quot; dbGetQuery(con,sql) # same above # dbExecute(con,sql) # 关闭数据库连接 DBI::dbDisconnect(con) 连接mysql MySQL()函数来源RMySQL包，用来创建&lt;MySQLDriver&gt;驱动，以下代码可连接到阿里云的MySQL数据库。 library(RMySQL) con &lt;- dbConnect(MySQL(), dbname = &quot;test&quot;, user = &quot;test_admin&quot;, password = &quot;30HL1234M7#￥lD6gxjB&quot;, host = &quot;prd-public-mypersonal.mysql.test.zhangjiabei.rds.aliyuncs.com&quot; ) 或者通过本地已安装驱动连接数据库 con &lt;- DBI::dbConnect(odbc::odbc(), Driver = &quot;MySQL ODBC 8.0 Unicode Driver&quot;, Server = &quot;localhost&quot;, UID = &quot;root&quot;, PWD = &quot;123456&quot;, Database = &quot;mysql&quot;, Port = 3306 ) mysql数据库默认端口是3306,访问不通时记得检查3306端口是否开放。 连接oracle 由ROracle包构造驱动。 library(ROracle) drv &lt;-dbDriver(&quot;Oracle&quot;) connect.string &lt;- &#39;(DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.16.88.129)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = bidev) ))&#39; #连接字符串 con &lt;- dbConnect(drv,username = &quot;query&quot;, password = &quot;query&quot;,dbname = connect.string) 8.3.3 读写数据库 dbGetQuery()函数查询数据并直接返回,dbExecute()执行sql语句，是dbSendStatement()的封装。 # dbGetQuery 直接查询 res_table &lt;- dbGetQuery(con,&#39;select * from table&#39;) #直接获取sql查询结果 #dbReadTable直接读取 dbReadTable(con,&#39;tbl_name&#39;) #直接读取数据库中某表 # dbSendQuery 执行一个查询任务 res &lt;- dbSendQuery(conn = con,statement = &#39;select * FROM tab&#39;) dbFetch(res) dbClearResult(res) # dbExecute dbExecute(con,&#39;delete from table where num &lt;=1000&#39;) # 执行sql语句 # dbWriteTable() # 上传数据,指定表名,需上传的数据框df,overwrite是否覆盖,append是否可追加 dbWriteTable(conn = con,name = &#39;表名&#39;,value = df,overwrite=TURE,append=FALSE) 参数化查询 library(DBI) con &lt;- dbConnect(RSQLite::SQLite(), &quot;:memory:&quot;) dbWriteTable(con, &quot;iris&quot;, iris) iris_result &lt;- dbSendQuery(con, &quot;SELECT * FROM iris WHERE [Petal.Width] &gt; ?&quot;) dbBind(iris_result, list(2.3)) dbFetch(iris_result) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 1 6.3 3.3 6.0 2.5 virginica #&gt; 2 7.2 3.6 6.1 2.5 virginica #&gt; 3 5.8 2.8 5.1 2.4 virginica #&gt; 4 6.3 3.4 5.6 2.4 virginica #&gt; 5 6.7 3.1 5.6 2.4 virginica #&gt; 6 6.7 3.3 5.7 2.5 virginica dbBind(iris_result, list(3)) dbFetch(iris_result) #&gt; [1] Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; &lt;0 行&gt; (或0-长度的row.names) dbClearResult(iris_result) dbDisconnect(con) 实际运用中，我们从数据库(SQL Server)查询不同订单周期时的销售数据： con &lt;- dbConnect(odbc::odbc(), .connection_string = &quot;driver={ODBC Driver 17 for SQL Server};server=172.16.88.2;database=test;uid=zhongyf;pwd=Zyf123456&quot;, timeout = 10) result &lt;- dbSendQuery(con, &quot;SELECT * FROM sales_order WHERE [单据日期] between ? and ? &quot;) # ?在本处是占位符 dbBind(result,params = list(&#39;2021-01-01&#39;,&#39;2021-01-05&#39;)) dbFetch(result) dbBind(result,params = list(&#39;2021-05-01&#39;,&#39;2021-05-05&#39;)) dbFetch(result) dbClearResult(result) 以上方式可以实现参数化查询，减少代码量，但是由于查询速度相比dbGetQuery()较慢，我一般不采用。 关于sql语句中?的用法请自行查阅?dbBind()。DBI当前未指定占位符格式,将来可能会支持统一的占位符语法 8.3.4 其它函数介绍 查看数据库信息,查看表名,删除表，关闭连接等常用操作. 查看数据库信息 dbGetInfo(con) #&gt; $db.version #&gt; [1] &quot;3.35.5&quot; #&gt; #&gt; $dbname #&gt; [1] &quot;:memory:&quot; #&gt; #&gt; $username #&gt; [1] NA #&gt; #&gt; $host #&gt; [1] NA #&gt; #&gt; $port #&gt; [1] NA 数据库读写权限 返回连接账户是否只有只读权限。 dbIsReadOnly(con) #&gt; [1] FALSE 查看全部表名 win下SQL Server中文表名会乱码 dbListTables(con) #&gt; [1] &quot;flights&quot; &quot;测试表&quot; 读取表 dt &lt;- dbReadTable(con,&#39;测试表&#39;) head(dt) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 1 5.1 3.5 1.4 0.2 setosa #&gt; 2 4.9 3.0 1.4 0.2 setosa #&gt; 3 4.7 3.2 1.3 0.2 setosa #&gt; 4 4.6 3.1 1.5 0.2 setosa #&gt; 5 5.0 3.6 1.4 0.2 setosa #&gt; 6 5.4 3.9 1.7 0.4 setosa 查询 rs &lt;- dbSendQuery(con, &quot;SELECT * from flights limit 100 &quot;) dt &lt;- dbFetch(rs) head(dt) #&gt; year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time #&gt; 1 2013 1 1 517 515 2 830 819 #&gt; 2 2013 1 1 533 529 4 850 830 #&gt; 3 2013 1 1 542 540 2 923 850 #&gt; 4 2013 1 1 544 545 -1 1004 1022 #&gt; 5 2013 1 1 554 600 -6 812 837 #&gt; 6 2013 1 1 554 558 -4 740 728 #&gt; arr_delay carrier flight tailnum origin dest air_time distance hour minute #&gt; 1 11 UA 1545 N14228 EWR IAH 227 1400 5 15 #&gt; 2 20 UA 1714 N24211 LGA IAH 227 1416 5 29 #&gt; 3 33 AA 1141 N619AA JFK MIA 160 1089 5 40 #&gt; 4 -18 B6 725 N804JB JFK BQN 183 1576 5 45 #&gt; 5 -25 DL 461 N668DN LGA ATL 116 762 6 0 #&gt; 6 12 UA 1696 N39463 EWR ORD 150 719 5 58 #&gt; time_hour #&gt; 1 1.36e+09 #&gt; 2 1.36e+09 #&gt; 3 1.36e+09 #&gt; 4 1.36e+09 #&gt; 5 1.36e+09 #&gt; 6 1.36e+09 dbClearResult(rs) # 记得清除结果 是否存在表 dbExistsTable(con,&#39;测试表&#39;) #&gt; [1] TRUE 创建表 con &lt;- dbConnect(RSQLite::SQLite(), &quot;:memory:&quot;) dbCreateTable(con, &quot;iris&quot;, iris) dbAppendTable(con, &quot;iris&quot;, iris) dbReadTable(con, &quot;iris&quot;) dbDisconnect(con) 删除表 dbRemoveTable(con,&#39;测试表&#39;) # same above # dbExecute(con,&#39;delete from 测试表&#39;) 是否有效 dbIsValid(con) rs &lt;- dbSendQuery(con, &quot;SELECT * from flights&quot;) dbIsValid(rs) dbClearResult(rs) dbIsValid(rs) 执行任务 执行语句,返回受影响的行数。 dbExecute(conn, statement, ...) dbExecute(con,&#39;delete from 测试表&#39;) 关闭连接 在完成连接后，最后关闭连接。 dbDisconnect(con) 通过学习odbc,DBI包，我们已经对R与数据库交互有一定了解。连接数据库并返回我们查询的结果，最后上传数据到数据库中，以上三步能正确使用即可满足我们数据分析师绝大部分需求。但是我们可能会对odbc与DBI的关系感到困惑,由于我并不太了解数据库，仅谈谈自己的理解，不一定正确。 以上三步，配合R的定时任务，可以完成ETL(Extract-Transform-Load). odbc提供了与odbc类数据库的连接方式，odbc基于DBI包，我们在安装odbc包时会自动安装DBI包。odbc负责连接odbc类数据库，DBI提供后端服务，换句话说odbc连接数据库，其它的交互通过DBI包完成。通过比较以下连接方式来理解： # 方式一 odbc con &lt;- DBI::dbConnect(odbc::odbc(), Driver = &quot;MySQL ODBC 8.0 Unicode Driver&quot;, Server = &quot;localhost&quot;, UID = &quot;root&quot;, PWD = &quot;123456&quot;, Database = &quot;test&quot;, Port = 3306 ) # 方式二 RMySQL library(RMySQL) con &lt;- dbConnect(MySQL(), dbname = &quot;test&quot;, user = &quot;root&quot;, password = &quot;123456&quot;, host = &quot;localhost&quot; ) 方式二与方式一都可以成功连接本地的mysql数据库，方式二是通过RMySQLB包的MySQL()功能提供的驱动程序。 但是不同的连接方式可能导致读写效率有明显的差异，详见oracle连接差异。 library(ROracle) # 方式一 # use ROracle packages connect databse drv &lt;-dbDriver(&quot;Oracle&quot;) connect.string &lt;- &#39;(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = 172.16.88.131)(PORT = 1521))(CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = ghbi) ))&#39; con_oracle &lt;- dbConnect(drv,username = &quot;pub_query&quot;, password = &quot;pub_query&quot;,dbname = connect.string,encoding=&#39;utf8&#39;) # 方式二 # use odbc packages connect databse con_odbc &lt;- dbConnect(odbc::odbc(), .connection_string = &quot;Driver={Oracle in OraClient11g_home1};DBQ=172.16.88.131:1521/ghbi;UID=pub_query;PWD=pub_query;&quot;, timeout = 10) # Oracle in OraClient11g_home1 根据实际驱动更改 # 通过odbc::odbcListDrivers() 查看 Database Management System,即数据库管理系统↩︎ "],["database-else-package.html", "8.4 其他R包", " 8.4 其他R包 通过前文了解，以下R包(RODBC除外)的作用仅仅是提供驱动即可，再通过DBI包与数据库交互。 8.4.1 RODBC包 RODBC包是R语言对ODBC数据库接口的封装,可连接所有的ODBC数据库，但是读写效率较低。 1.安装包 install.packages(&#39;RODBC&#39;) 2.SQL SERVER 数据库举例 library(RODBC) con &lt;- odbcDriverConnect(&quot;driver={SQL Server};server=192.168.2.62;database=dbname;uid=zhongyf;pwd=Zyf123456&quot;) con RODBC::sqlQuery(con,&#39;select * from test&#39;) ` 怎样安装驱动 请参照驱动安装 ODBC for sql server driver 下载地址地址 3.数据库字符串 请参照数据库连接字符串 #ODBC Driver 17 for SQL Server cn &lt;- odbcDriverConnect(&quot;Driver={ODBC Driver 17 for SQL Server};Server=localhost;Database=name;UID=username;PWD=123456;&quot;) #server 数据库 UID 数据库账户 PWD 数据库账户密码 sql server 请参照sql server连接字符串 8.4.2 ROracle包 在第一次安装这个包时遇到了很多困难，首先需要安装oracle客户端，其次配置好环境变量，最后安装包。R与Oracle的连接需要安装Oracle Instant Client， 安装客户端 安装oracle客户端，根据电脑的位数选择相应的32位或64位，根据要连接数据库版本，可以去官网自行下载，本机需要下载的客户端地址 配置环境变量 根据自己所使用的系统，配置环境变量 OCI_INC=&#39;D:\\app\\zhongyf\\product\\11.2.0\\client_1\\oci\\include&#39; OCI_LIB64=&#39;D:\\app\\zhongyf\\product\\11.2.0\\client_1\\BIN&#39; 安装包 安装Roracle包需要配置相应版本的Rtools并添加到环境变量，另外配置两个oracle的环境变量。代码中有注释,按照自己安装版本路径修改。 由于ROracle依赖于Oracle Instant Client,安装之前一定要先安装好客户端。 install.packages(&#39;ROracle&#39;) 连接数据库 Roracle可以通过DBI包链接，除了驱动和连接字符串有差异，其他部分一样。 library(ROracle) drv &lt;-dbDriver(&quot;Oracle&quot;) connect.string &lt;- &#39;(DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.16.88.129)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = bidev) ))&#39; #连接字符串 con &lt;- dbConnect(drv,username = &quot;query&quot;, password = &quot;query&quot;,dbname = connect.string) 乱码问题 如果连接oracle数据库，中文乱码设置以下环境变量即可，或者在启动文件配置该环境变量。 linux下可以在文件Renviron中添加，记得引号，路径为[/opt/R/4.0.2/lib/R/etc/Renviron] # 查询数据库编码 select userenv(&#39;language&#39;) from dual Sys.setenv(NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.AL32UTF8&quot;) 由于ROracle包的安装存在一定难度，具体安装说明可以参考微信公众号-宇飞的世界R包ROracle安装 8.4.3 RMySQL包 RMySQL包的主要作用可以提供驱动与mysql数据库进行连接，在本机未安装mysql的驱动的情况下.该包正在逐渐被淘汰，可以使用RMariaDB包替换。 1.安装 Win系统下直接安装即可，其它平台下需提前安装依赖环境。 #On recent Debian or Ubuntu install libmariadbclient-dev sudo apt-get install -y libmariadbclient-dev #On Fedora, CentOS or RHEL we need mariadb-devel: sudo yum install mariadb-devel #On OS-X use mariadb-connector-c from Homebrew: brew install mariadb-connector-c install.packages(&#39;RMySQL&#39;) 2.连接使用 上述连接方式一致，仅仅是指驱动差异 library(RMySQL) con &lt;- RMySQL::dbConnect(drv = RMySQL::MySQL(),host=&#39;localhost&#39;,dbname=&quot;mysql&quot;,username=&quot;root&quot;,password=&#39;123456&#39;) RMariaDB包与RMySQL包用法基本一致，在连接时注意驱动的选择即可。 install.packages(&#39;RMariaDB&#39;) library(RMariaDB) con &lt;- RMySQL::dbConnect(drv = RMariaDB::MariaDB() ,host=&#39;localhost&#39;,dbname=&quot;dbtest&quot;,username=&quot;root&quot;,password=&#39;123456&#39;) 8.4.4 RSQLite RSQLite是练习使用R中的数据库的最简单方法，因为程序包本身包含SQLite，无需任何外部软件。 项目地址 1.安装 install.packages(&quot;RSQLite&quot;) 2.基础用法 library(DBI) # 在内存中创建一个临时数据库 con &lt;- dbConnect(RSQLite::SQLite(), &quot;:memory:&quot;) dbListTables(con) #&gt; character(0) dbWriteTable(con, &quot;mtcars&quot;, mtcars) dbListTables(con) #&gt; [1] &quot;mtcars&quot; df &lt;- dbReadTable(con, &quot;mtcars&quot;) head(df) #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; 1 21.0 6 160 110 3.90 2.62 16.5 0 1 4 4 #&gt; 2 21.0 6 160 110 3.90 2.88 17.0 0 1 4 4 #&gt; 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 #&gt; 4 21.4 6 258 110 3.08 3.21 19.4 1 0 3 1 #&gt; 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 #&gt; 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 res &lt;- dbSendQuery(con, &quot;SELECT * FROM mtcars WHERE cyl = 4&quot;) df &lt;- dbFetch(res) dbClearResult(res) head(df) #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; 1 22.8 4 108.0 93 3.85 2.32 18.6 1 1 4 1 #&gt; 2 24.4 4 146.7 62 3.69 3.19 20.0 1 0 4 2 #&gt; 3 22.8 4 140.8 95 3.92 3.15 22.9 1 0 4 2 #&gt; 4 32.4 4 78.7 66 4.08 2.20 19.5 1 1 4 1 #&gt; 5 30.4 4 75.7 52 4.93 1.61 18.5 1 1 4 2 #&gt; 6 33.9 4 71.1 65 4.22 1.83 19.9 1 1 4 1 dbDisconnect(con) 基础用法与DBI功能一致。 "],["database-big-data.html", "8.5 大数据相关R包", " 8.5 大数据相关R包 sparklyr https://spark.rstudio.com/ RClickhouse https://github.com/hannesmuehleisen/clickhouse-r 其它R包，如bigrquery。 8.5.1 sparklyr sparkly包可以连接[spark]5(http://spark.apache.org/)，并且支持dplyr包方法。详情情况sparklyr介绍 spark 依赖java环境，需要系统上安装java方可使用。 1.R 包安装 # cran 版 install.packages(&quot;sparklyr&quot;) # 开发版 devtools::install_github(&quot;rstudio/sparklyr&quot;) 2.连接到 spark 连接之前需要安装 java 环境以及通过sparklyr::spark_install()安装 spark。 java下载，下载安装后配置java环境变量。 # Win10 JAVA_HOME = C:\\Program Files\\Java\\jre1.8.0_291 检查环境变量，在R中执行 Sys.getenv(&#39;JAVA_HOME&#39;) &gt;&gt; &quot;C:\\\\Program Files\\\\Java\\\\jre1.8.0_291&quot; library(sparklyr) sc &lt;- spark_connect(master = &quot;local&quot;) 3.使用 dplyr library(dplyr) iris_tbl &lt;- copy_to(sc, iris) flights_tbl &lt;- copy_to(sc, nycflights13::flights, &quot;flights&quot;) batting_tbl &lt;- copy_to(sc, Lahman::Batting, &quot;batting&quot;) dplyr::src_tbls(sc) filter实列: flights_tbl %&gt;% filter(dep_delay == 2) sparkrly同样兼容DBI，支持SQL语句查询，更多详情请官网查阅。 8.5.2 RClickhouse ClickHouse 是面向列的数据库管理系统(DBMS),用于对查询进行连接分析处理(OLAP)。 按照官网安装教程安装。 1.R 包安装 install.packages(&quot;RClickhouse&quot;) 2.配置远程连接 参考资料 3.安装驱动 安装ODBC驱动是为了和Power BI，tableau，Excel等工具连接。 驱动下载 4.连接 library(RClickhouse) library(DBI) # 本地默认连接 con_local &lt;- dbConnect(RClickhouse::clickhouse(), host=&quot;localhost&quot;, port=9000L, user=&quot;default&quot;, password=&quot;&quot;) dbExecute(con_local,&quot;CREATE DATABASE IF NOT EXISTS tutorial&quot;) # 指定库远程连接 con_remote &lt;- dbConnect(RClickhouse::clickhouse(), host=&quot;192.168.2.237&quot;, port=9000L, user=&quot;default&quot;, password=&quot;&quot;,dbname=&#39;tutorial&#39;) win系统上配置odbc时，注意ODBC版本，clickhouse-odbc下载。最初我使用的odbc版本太旧，Excel无法成功连接clickhouse数据库。 我用tableau实时连接clickhouse数据库，测试速度完爆 MS SQL Server，测试的数据量大概在2000万行，6G左右。 我用Excel通过odbc驱动连接，数据据提取速度特别慢(相比MS SQL Server)。不知道是不是因为 Exce l 和MS SQL Server 都是微软自家产品。另外表中的时间字段和 MS SQL Server 不一样，不能直接上传。 整体测试下来，建议持续保持观望，有机会就测试先试用着。毕竟在OLAP方面确实有一定优势，并且数据库支持中文，但是表头目前还未支持中文。 Apache Spark 是用于大规模数据处理的统一分析引擎。↩︎ "],["database-FAQ.html", "8.6 常见问题", " 8.6 常见问题 在使用R包连接数据库时有些常见的问题，整理如下。 8.6.1 乱码问题 R中中文乱码问题一直都很麻烦，并且常常遇见，尤其是使用win系统时。 MS SQL SERVER 乱码 修改encoding参数，在win系统下，可以考虑使用RODBC包连接查询数据库，因为该包将自动转换编码，不会存在乱码问题。但是上传效率奇慢，为了减少包依赖保持代码一致性使用odbc连接数据库时遇到乱码，在连接数据库时设定encoding即可。 # win con_spb &lt;- dbConnect(odbc(), .connection_string = &quot;driver={SQL Server};server=172.16.88.2;database=spb;uid=zhongyf;pwd=Zyf123456&quot;, timeout = 10, timezone = &quot;Asia/Shanghai&quot;, encoding = &quot;gbk&quot; ) # linux con_spb &lt;- dbConnect(odbc(), .connection_string = &quot;driver={SQL Server};server=172.16.88.2;database=spb;uid=zhongyf;pwd=Zyf123456&quot;, timeout = 10, timezone = &quot;Asia/Shanghai&quot;, encoding = &quot;utf8&quot; ) MySQL乱码 1.代码修改 #执行查询语句前执行 dbSendQuery(con,&#39;SET NAMES gbk&#39;) 2.ODBC配置 如果是通过ODBC数据源连接,可通过配置需改,如下所示： ODBC配置截图 oracle乱码 linux上通过ROracle连接oracle数据库，中文乱码。可以通过设置环境变量或配置.Renviron文件修改oracle语言环境。 Sys.setenv(NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.AL32UTF8&quot;) 8.6.2 无法连接问题 SQL Servver无法连接 如果是自己安装配置的数据库，无法通过IP地址连接，可能是没有开启远程连接。 mysql无法连接 首先需要装mysql的驱动,确保RMySQL成功安装 如果是测试自己安装的mysql,可以先用Navicat连接,如果出现Authentication plugin ‘caching_sha2_password’ cannot be loaded的错误。 可能是由于 mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password,通过修改加密规则可解决无法连接问题。 --cmd 登录本地数据 mysql -u root -p --输入密码 password: --执行命令 ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; PASSWORD EXPIRE NEVER; #修改加密规则 ---ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; PASSWORD EXPIRE NEVER; 看账号权限注意与上面的区别 ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;; #更新一下用户的密码 8.6.3 远程连接 当你需要远程连接时，需要确保数据库的远程连接已经开启。在数据库中开启某账户远程连接权限,在公司的话，数据库连接问题咨询公司的IT人员。自己个人电脑上安装的MS SQL SERVER数据库需要自行开启远程连接。 另外如果是云服务器上搭建的数据库,需要开启数据库端口，如Mysql默认端口3306;如果是阿里云的Rds数据库,找DBA管理员要数据库地址以及端口信息。 8.6.4 跳板机连接 有些数据库是无法外网访问的，需要通过跳板机跳转后后才有权限访问，或者给某公网IP配置权限后才能访问。 R解决方案 在本地使用Putty或通过R包ssh解决。 library(ssh) session &lt;- ssh_connect(host = &#39;user@ip:port&#39;,passwd = &#39;password&#39;) ssh_tunnel(session = session,port = 3306,target = &#39;ip:port&#39;) python解决方案 import mysql.connector import sshtunnel with sshtunnel.SSHTunnelForwarder( (_host, _ssh_port), ssh_username=_username, ssh_password=_password, remote_bind_address=(_remote_bind_address, _remote_mysql_port), local_bind_address=(_local_bind_address, _local_mysql_port) ) as tunnel: connection = mysql.connector.connect( user=_db_user, password=_db_password, host=_local_bind_address, database=_db_name, port=_local_mysql_port) ... 关于数据库无法连接的问题，请咨询公司DBA管理人员。 "],["database-dbplyr-package.html", "8.7 dbplyr", " 8.7 dbplyr dbplyr将dplyr包的函数转化为SQL语句去服务器获取数据；在数据量较大、计算较多时，可以将远程连接数据库中的表当作内存中的数据框使用，当本机内存不够大时，这样做的好处不言而喻。 至于为什么使用dbplyr而不是直接编写SQL,因为： dbplyr写起来简洁高效，基本跟用dplyr没有差别 能利用数据库所在服务器的算力，配合上并行计算，在处理大量数据时，大大加快速度。 不同数据库的语法存在差异，当源数据存在不同数据库时，用R的dbplyr包清洗数据时能加快效率 通过dplyr动词方便实现复杂的逻辑，当过程越多越复杂时dbplyr的优势越明显，不用一层层嵌套语句。 dbplyr项目介绍 8.7.1 安装 dbplyr包是tidyverse系列核心包之一，可以通过安装tidyverse或仅安装dbplyr。 install.packages(&quot;tidyverse&quot;) # 从CRAN安装发行版 install.packages(&quot;dbplyr&quot;) # 开发版 library(devtools) devtools::install_github(&quot;tidyverse/dbplyr&quot;) 8.7.2 基础用法 library(dplyr) library(dbplyr) mf &lt;- memdb_frame(x = 1, y = 2) mf %&gt;% mutate( a = y * x, b = a ^ 2, ) %&gt;% show_query() library(dplyr) #connect database con &lt;- DBI::dbConnect(RSQLite::SQLite(), path = &quot;:memory:&quot;) # 上传数据 copy_to(con, nycflights13::flights, &quot;flights&quot;, temporary = FALSE, indexes = list( c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;), &quot;carrier&quot;, &quot;tailnum&quot;, &quot;dest&quot; ) ) # 查看库中全部表名 #dbListTables(con) #tbl()引用表flights flights_db &lt;- tbl(con, &quot;flights&quot;) flights_db # 开始查询 flights_db %&gt;% select(year:day, dep_delay, arr_delay) flights_db %&gt;% filter(dep_delay &gt; 240) flights_db %&gt;% group_by(dest) %&gt;% summarise(delay = mean(dep_time)) 部分简单不复杂的sql语句可以用dplyr的语法代替. tailnum_delay_db &lt;- flights_db %&gt;% group_by(tailnum) %&gt;% summarise( delay = mean(arr_delay,na.rm = T), n = n() ) %&gt;% arrange(desc(delay)) %&gt;% filter(n &gt; 100) tailnum_delay_db tailnum_delay_db %&gt;% show_query() tailnum_delay &lt;- tailnum_delay_db %&gt;% collect() #把数据从数据库加载到R内存中 8.7.3 无法正确转化 在使用过程中发现无法识别lubridate包的函数，但是dbplyr对于不认识的函数都将保留。利用这个特性，可以使用数据库中原生的相关函数：如下所示，在Oracle中to_date函数。 以下的自定义函数可以实现按照想要group_by的字段汇总金额、数量、吊牌额、折扣率等,其中关于时间周期的筛选就利用了该特性。 date #个人写的针对目前公司数仓写的包中获取销售数据的一段代码 get_sales_data &lt;- function(con,...,start_date,end_date,brand_name,channel_type = NULL ,area_name = NULL,boss_name = NULL,category_name = NULL,shop_no = NULL){ store_table &lt;- store(con,brand_name = brand_name,channel_type = channel_type ,area_name = area_name,boss_name = boss_name,shop_no = shop_no) #门店信息 sku_table &lt;- sku(con,category_name = category_name ) #商品信息 tbl(con, in_schema(&quot;DW&quot;, &quot;DW_SALE_SHOP_F&quot;)) %&gt;% #DW层 select(BILL_DATE1, SKU_NO, SHOP_NO, BILL_QTY, BILL_MONEY2, PRICE) %&gt;% filter(between( BILL_DATE1, to_date(start_date, &quot;yyyy-mm-dd&quot;), to_date(end_date, &quot;yyyy-mm-dd&quot;) )) %&gt;% mutate(年 = year(BILL_DATE1), 月 = month(BILL_DATE1)) %&gt;% inner_join(store_table) %&gt;% inner_join(sku_table) %&gt;% group_by(...) %&gt;% summarise( 金额 = sum(BILL_MONEY2, na.rm = TRUE), 数量 = sum(BILL_QTY, na.rm = TRUE), 吊牌金额 = sum(BILL_QTY * PRICE, na.rm = TRUE)) %&gt;% collect() %&gt;% mutate(折扣率:= 金额 / 吊牌金额) %&gt;% arrange(...) # return(res) } like mf %&gt;% filter(x %LIKE% &quot;%foo%&quot;) %&gt;% show_query() 特殊用法 特殊情况可以使用sql()函数 mf %&gt;% transmute(factorial = sql(&quot;x!&quot;)) %&gt;% show_query() "],["database-reference-material.html", "8.8 参考资料", " 8.8 参考资料 1.DBI包资料 https://dbi.r-dbi.org/reference/ 2.dbplyr包资料 https://dbplyr.tidyverse.org/ 3.rstudio关于数据库介绍 https://db.rstudio.com/databases 4.数据库连接字符串介绍 https://www.connectionstrings.com/ 5.驱动安装 https://github.com/r-dbi/odbc#installation 6.关于Roracle的安装介绍 https://mp.weixin.qq.com/s/QLwedZ5mTybqSXdHMTGRIw 7.DBI消息 https://www.r-consortium.org/blog/2017/05/15/improving-dbi-a-retrospect "]]
