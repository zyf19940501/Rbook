[["character-handling.html", "4 字符处理", " 4 字符处理 实际数据分析工作中,经常需要处理字符串以便让数据整洁，符合分析需求。在我们常用工具 Excel 或 SQL 中也有处理字符串的需求。绝大部分时候，截断、替换等基础实现就能满足我们的大部分字符处理需求。 Excel 中自带的字符串函数1，如:left,len,mid,find,Proper,rept,trim,upper,substitute, concatenate，以及Excle2019新出的concat,TEXTJOIN等字符函数，TEXTJOIN函数我个人比较喜欢用。 但是Excel中字符处理功能存在一定局限性,没有直接可用的正则表达式2函数,在正则表达式本身就很困难的情况下，在VBA中实现较复杂的函数将会难上加难。 在学习 R 的字符处理时候,可以自行尝试实现以上相对应 Excel 函数 字符处理，本人觉得本质上就是将字符定位后去实现不同的操作，比如替换、截断等。所以字符处理难点在于字符串中字符的定位，而实现这个功能就需要用到正则表达式，所以字符处理真正的难点在于正则表达式的编写。但是，在我看来正则表达式想要掌握，难度过高，我们秉着随用随查的态度对待即可。 因为大部分的数据分析工作者并不会面临太多复杂的字符处理工作，对大部分常规商业数据分析工作者面对的数据而言，字符处理可能仅仅只是合并、剔除、删除空格、倒序等基础操作。面对舆情监控，购物评价等纯文本情感分析工作，个人觉得对普通数据分析岗位有点超纲，所以本章节的字符处理仅仅是常规的字符处理。 在 R 语言中字符处理，可以分为两大方法，一种是 base R 中原生的字符处理函数，另外一种是使用 tidyverse 系列中的 stringr 处理字符。所以本章节着重从这两方面阐述字符处理函数用法。 Excel中支持的TEXT functions↩︎ 正则表达式(regular expression)描述了一种字符串匹配的模式(pattern),查看帮助?regex。↩︎ "],["character-base-R.html", "4.1 base R", " 4.1 base R 本小节简述 base R 中关于字符处理的常用函数。 4.1.1 单双引号 R语言中字符串输入时，可以使用单引号，也可以使用双引号，详情请看?Quotes。 单双引号，用法和意义没有差别 R 中推荐使用双引号分隔符，打印、显示时都是用双引号 单引号字符串通常用在字符串内包含双引号时，如用 R 执行 sql 字符串代码时 R-4.0之后引入的R字符[newfeatures]，让单双引号基本没区别 R中的字符用单双引号都可创建，如下所示: x &lt;- &quot;R语言&quot; x #&gt; [1] &quot;R语言&quot; x &lt;- &#39;R语言&#39; x #&gt; [1] &quot;R语言&quot; 4.1.2 转义 要在字符串中包含单引号或双引号，需用 转义它，即遇到特殊符号时需要转义,如果不正确使用转义，可能会报错，如下所示： paste(&quot;&quot;&quot;,&quot;abc&quot;,sep=&quot;&quot;) #&gt; 错误: unexpected string constant in &quot;paste(&quot;&quot;&quot;,&quot;&quot; R语言中使用“\"把特定的字符转义为特殊字符，例如“是制表符，“”是换行符，或者是“”(系统差异)。想要正确显示“’”，需使用转义，如下所示： char &lt;- &quot;我是一名\\&#39;小学生\\&#39;&quot; char #&gt; [1] &quot;我是一名&#39;小学生&#39;&quot; 打印会显示转义符,因为 R 语言内数据存储和打印是不一样的，运行结果为存储的数据形式，不是打印形式。 要查看字符串的原始内容,可使用writeLines()或cat()。 x &lt;- c(&quot;\\&quot;&quot;, &quot;\\\\&quot;) x #&gt; [1] &quot;\\&quot;&quot; &quot;\\\\&quot; writeLines(x) #&gt; &quot; #&gt; \\ writeLines(char) #&gt; 我是一名&#39;小学生&#39; cat(char) #&gt; 我是一名&#39;小学生&#39; 4.1.3 常用函数 字符数量 s &lt;- &#39;abcdefg&#39; nchar(s) #&gt; [1] 7 大小写 # 转换为大写 toupper(&#39;abc&#39;) #&gt; [1] &quot;ABC&quot; # 转换为小写 tolower(&#39;ABC&#39;) #&gt; [1] &quot;abc&quot; 拼接 函数paste()将不同的字符向量拼接组合起来，返回的数据类型是字符向量。其中分割参数 sep 默认值是\" \"(空格)。collapse 参数是使用指定的字符把各元素拼接在一次成一个单独的字符串。 paste(&#39;a&#39;,&#39;b&#39;,&#39;d&#39;) #&gt; [1] &quot;a b d&quot; paste(&#39;a&#39;,&#39;b&#39;,&#39;d&#39;,sep = &#39;&#39;) #&gt; [1] &quot;abd&quot; paste(&#39;a&#39;,&#39;b&#39;,&#39;d&#39;,sep = &#39;_&#39;) #&gt; [1] &quot;a_b_d&quot; paste(c(&#39;a&#39;,&#39;b&#39;),c(&#39;d&#39;,&#39;e&#39;),collapse = &#39;_&#39;) #&gt; [1] &quot;a d_b e&quot; paste(c(&#39;a&#39;,&#39;b&#39;),c(&#39;d&#39;,&#39;e&#39;),sep = &#39;-&#39;,collapse = &#39;_&#39;) #&gt; [1] &quot;a-d_b-e&quot; 大家可以自行了解paste和paste0两个函数的差异。 截取 substr函数用于字符串截取子字符串,start,stop参数是整数。 # 空格占据一个长度 substr(&quot;R is free software&quot; ,start = 1,stop = 6) #&gt; [1] &quot;R is f&quot; 分割 函数strsplit按照指定的字符把字符分割成子字符。参数x指被分割的字符，split是用于分割的字符标准，fixed是否完全匹配分隔符，默认是TRUE,完全匹配模式，当fixed参数为FALSE时，表明split参数是正则表达式，使用正则匹配。 strsplit(x,split,fixed,perl,useBytes) strsplit函数返回的结果是列表，大部分时候需要向量化后使用。 strsplit(&#39;广东省-深圳市-宝安区&#39;,split=&#39;-&#39;) #&gt; [[1]] #&gt; [1] &quot;广东省&quot; &quot;深圳市&quot; &quot;宝安区&quot; # 向量化 # unlist(strsplit(&#39;广东省-深圳市-宝安区&#39;,split=&#39;-&#39;)) 官方手册中提供一个字符倒叙的自定义编写的函数： strReverse &lt;- function(x) sapply(lapply(strsplit(x, NULL), rev), paste, collapse = &quot;&quot;) strReverse(c(&quot;abc&quot;, &quot;Statistics&quot;)) #&gt; [1] &quot;cba&quot; &quot;scitsitatS&quot; 这个自定义编写的函数实现的逻辑是：将字符串全部切割成单个字符，然后使用rev()函数将字符向量倒序，最后通过paste()函数将字符向量合并在一起。最后将该过程使用 apply 系列函数包装，实现更好的向量化。 4.1.4 新特性 该特性让反斜杠或单引号和双引号书写变得容易。用法r“(…)”，括号中可以是任意字符，详情请看?Quotes。 # windows下路径 ,不用转义路径复制直接可用 char &lt;- r&quot;(C:\\Users\\zhongyf\\Desktop\\Rbook)&quot; char #&gt; [1] &quot;C:\\\\Users\\\\zhongyf\\\\Desktop\\\\Rbook&quot; char &lt;- &quot;我是一名\\&#39;小学生\\&#39;&quot; cat(char) #&gt; 我是一名&#39;小学生&#39; char &lt;- r&quot;(我是一名&#39;R语言&#39;学习者)&quot; cat(char) #&gt; 我是一名&#39;R语言&#39;学习者 注意该特性需要在R-4.0.0之后的版本中使用 "],["character-stringr-packages.html", "4.2 stringr", " 4.2 stringr 本小节介绍 R 包stringr，stringr 包的函数处理字符相对简单，并且是tidyverse系列的一部分，是很成熟的R包，API功能稳定。stringr是基于stringi之上构建的,stringr包集合了常见字符功能函数，如果发现 stringr 缺少某些功能可以查看stringi包。 如上文所说，字符串处理的难点，个人觉得在于正则表达式的掌握程度。对大部分常规商业数据分析工作者的面对的表格数据而言，字符处理可能仅仅只是合并、剔除、删除空格、倒叙等基础操作，所以stringr 包基本满足字符处理需求。 如果不熟悉R中的字符串，可以从R for Data Science的字符串部分开始学习，本小节的部分案例照搬R for Data Science。 4.2.1 安装 从 CRAN 安装发行版或者是通过 github 安装开发版。 # Install the released version from CRAN: install.packages(&quot;stringr&quot;) # Install the cutting edge development version from GitHub: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/stringr&quot;) 4.2.2 基本使用 stringr包中所有的函数都已str_开头，让待处理字符做第一个参数，这样处理好处明显，方便使用以及记忆。 字符串长度 library(stringr) char &lt;- &quot;我是R语言学习者&quot; str_length(char) #&gt; [1] 8 # 向量化 str_length(c(&quot;a&quot;, &quot;R for data science&quot;, NA)) #&gt; [1] 1 18 NA 连接字符串 R中字符串不像python中可以用加号连接字符串,如下所示: R 版本 #base R paste0(&#39;a&#39;,&#39;b&#39;) #&gt; [1] &quot;ab&quot; #stringr str_c(&quot;a&quot;,&quot;b&quot;) #&gt; [1] &quot;ab&quot; str_c(&quot;a&quot;, &quot;b&quot;, sep = &quot;, &quot;) #sep 参数控制分隔符 #&gt; [1] &quot;a, b&quot; Python 版本 &#39;a&#39; + &#39;b&#39; #&gt; &#39;ab&#39; 多个字符串合并为一个字符,stringr中的函数都是向量化的，合并一个和多个字符都是同样道理。 #base R paste0(c(&#39;a&#39;,&#39;b&#39;,&#39;d&#39;,&#39;e&#39;),collapse = &#39;,&#39;) #&gt; [1] &quot;a,b,d,e&quot; #stringr str_c(c(&#39;a&#39;,&#39;b&#39;,&#39;d&#39;,&#39;e&#39;),collapse = &#39;,&#39;) #collapse 参数控制 #&gt; [1] &quot;a,b,d,e&quot; 移除 在正则表达式中 有特殊含义,有时需要两个 ，多体会下面这段，代码实现移除“||”的功能。 str_remove(string = &#39;a||b&#39;,pattern = &quot;\\\\|\\\\|&quot;) #&gt; [1] &quot;ab&quot; 另外常见的\\n, \\t需要被转义处理,在字符清洗,如小说语义分析,网页爬虫后整理等数据清洗过程中经常用到. 4.2.3 常用函数 本小节介绍 stringr 中常用函数的用法。 4.2.3.1 截取字符 与Excle中left,mid,right函数功能类似 str_sub() 函数 三个参数: string:需要被截取的字符串 start: 默认1L,即从最开始截取 end:默认-1L,即截取到最后 #注意end 3 和 -3的区别 str_sub(string = &#39;我是R语言学习者&#39;,start = 2,end = 3) #&gt; [1] &quot;是R&quot; str_sub(string = &#39;我是R语言学习者&#39;,start = 2,end = -3) #&gt; [1] &quot;是R语言学&quot; 4.2.3.2 匹配字符 查看函数帮助文档,str_match()按照指定pattern(正则表达式)查找字符。困难点在于正则表达式的编写。 str_match(string, pattern) str_match_all(string, pattern) str_extract(string, pattern) str_extract_all(string, pattern, simplify = FALSE) str_extract()函数返回向量,str_match()函数返回矩阵. # 测试文字来源烽火戏诸侯的&lt;剑来&gt; strings &lt;- c(&#39;陈平安放下新折的那根桃枝,吹灭蜡烛,走出屋子后,坐在台阶上,仰头望去,星空璀璨.&#39;) str_extract(strings,&#39;陈平安&#39;) #&gt; [1] &quot;陈平安&quot; str_match(strings,&#39;陈平安&#39;) #&gt; [,1] #&gt; [1,] &quot;陈平安&quot; 匹配中文 匹配中文的正则表达式\\[-] str_extract_all(strings,&#39;[\\u4e00-\\u9fa5]&#39;) #返回list #&gt; [[1]] #&gt; [1] &quot;陈&quot; &quot;平&quot; &quot;安&quot; &quot;放&quot; &quot;下&quot; &quot;新&quot; &quot;折&quot; &quot;的&quot; &quot;那&quot; &quot;根&quot; &quot;桃&quot; &quot;枝&quot; &quot;吹&quot; &quot;灭&quot; &quot;蜡&quot; #&gt; [16] &quot;烛&quot; &quot;走&quot; &quot;出&quot; &quot;屋&quot; &quot;子&quot; &quot;后&quot; &quot;坐&quot; &quot;在&quot; &quot;台&quot; &quot;阶&quot; &quot;上&quot; &quot;仰&quot; &quot;头&quot; &quot;望&quot; &quot;去&quot; #&gt; [31] &quot;星&quot; &quot;空&quot; &quot;璀&quot; &quot;璨&quot; 匹配数字或英文 查找数字的正则表达式[0-9];查找英文的正则表达式:[a-zA-Z] strings &lt;- c(&#39;00123545&#39;,&#39;LOL league of legends&#39;) str_extract_all(strings,&#39;[0-9]&#39;) #&gt; [[1]] #&gt; [1] &quot;0&quot; &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;5&quot; &quot;4&quot; &quot;5&quot; #&gt; #&gt; [[2]] #&gt; character(0) str_extract_all(strings,&#39;[a-zA-Z]&#39;) #&gt; [[1]] #&gt; character(0) #&gt; #&gt; [[2]] #&gt; [1] &quot;L&quot; &quot;O&quot; &quot;L&quot; &quot;l&quot; &quot;e&quot; &quot;a&quot; &quot;g&quot; &quot;u&quot; &quot;e&quot; &quot;o&quot; &quot;f&quot; &quot;l&quot; &quot;e&quot; &quot;g&quot; &quot;e&quot; &quot;n&quot; &quot;d&quot; &quot;s&quot; 4.2.3.3 添加字符 str_pad() 函数向字符串添加字符。像工作中处理月份的时候,1,2,3,4,5,6,7,8,9,10,11,12变成01,02,03,04,05,06,07,08,09,10,11,12.按照日期时间输出文件名称,如下所示: str_pad(string = 1:12,width = 2,side = &#39;left&#39;,pad = &#39;0&#39;) #&gt; [1] &quot;01&quot; &quot;02&quot; &quot;03&quot; &quot;04&quot; &quot;05&quot; &quot;06&quot; &quot;07&quot; &quot;08&quot; &quot;09&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; 4.2.3.4 去除空格 与excel中trim函数功能类似，剔除字符中的空格，但是不可以剔除字符中的空格 # side 可选 both left right str_trim(&#39; ab af &#39;,side = &#39;both&#39;) #&gt; [1] &quot;ab af&quot; 4.2.3.5 分割字符 str_split()处理后的结果是列表 # 得到列表,需要向量化 str_split(&quot;a,b,d,e&quot;,pattern = &#39;,&#39;) #&gt; [[1]] #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;d&quot; &quot;e&quot; str_split(&#39;ab||cd&#39;,&#39;\\\\|\\\\|&#39;) %&gt;% unlist() #&gt; [1] &quot;ab&quot; &quot;cd&quot; # same above #str_split(&#39;ab||cd&#39;,&#39;\\\\|\\\\|&#39;) %&gt;% purrr::as_vector() 当待处理的字符串是字符串向量时，得到的列表长度与向量长度一致 fruits &lt;- c( &quot;apples and oranges and pears and bananas&quot;, &quot;pineapples and mangos and guavas&quot; ) str_split(fruits, &quot; and &quot;) #&gt; [[1]] #&gt; [1] &quot;apples&quot; &quot;oranges&quot; &quot;pears&quot; &quot;bananas&quot; #&gt; #&gt; [[2]] #&gt; [1] &quot;pineapples&quot; &quot;mangos&quot; &quot;guavas&quot; 4.2.3.6 替换字符 str_replace()，str_replace_all()函数用来替换字符 fruits &lt;- c(&quot;one apple&quot;, &quot;two pears&quot;, &quot;three bananas&quot;) str_replace(fruits, &quot;[aeiou]&quot;, &quot;-&quot;) #&gt; [1] &quot;-ne apple&quot; &quot;tw- pears&quot; &quot;thr-e bananas&quot; str_replace_all(fruits, &quot;[aeiou]&quot;, &quot;-&quot;) #&gt; [1] &quot;-n- -ppl-&quot; &quot;tw- p--rs&quot; &quot;thr-- b-n-n-s&quot; 4.2.3.7 移除字符 str_remove(),str_remove_all()移除字符。本人常用该函数剔除文本中的空格。 fruits &lt;- c(&quot;one apple&quot;, &quot;two pears&quot;, &quot;three bananas&quot;) str_remove(fruits, &quot;[aeiou]&quot;) #&gt; [1] &quot;ne apple&quot; &quot;tw pears&quot; &quot;thre bananas&quot; str_remove_all(fruits, &quot;[aeiou]&quot;) #&gt; [1] &quot;n ppl&quot; &quot;tw prs&quot; &quot;thr bnns&quot; 移除文本中空格 str_replace_all(string = &#39; d a b &#39;,pattern = &#39; &#39;,replacement = &#39;&#39;) #&gt; [1] &quot;dab&quot; 4.2.3.8 字符排序 numeric 参数决定是否按照数字排序。 str_order(x, decreasing = FALSE, na_last = TRUE, locale = &quot;en&quot;, numeric = FALSE, ...) str_sort(x, decreasing = FALSE, na_last = TRUE, locale = &quot;en&quot;, numeric = FALSE, ...) str_order(letters) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #&gt; [26] 26 str_sort(letters) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; #&gt; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; numeric参数 x &lt;- c(&quot;100a10&quot;, &quot;100a5&quot;, &quot;2b&quot;, &quot;2a&quot;) str_sort(x) #&gt; [1] &quot;100a10&quot; &quot;100a5&quot; &quot;2a&quot; &quot;2b&quot; str_sort(x, numeric = TRUE) #&gt; [1] &quot;2a&quot; &quot;2b&quot; &quot;100a5&quot; &quot;100a10&quot; 4.2.3.9 提取单词 从句子中提取单词。 参数 word(string, start = 1L, end = start, sep = fixed(&quot; &quot;)) 案例 sentences &lt;- c(&quot;Jane saw a cat&quot;, &quot;Jane sat down&quot;) word(sentences, 2, -1) #&gt; [1] &quot;saw a cat&quot; &quot;sat down&quot; word(sentences[1], 1:3, -1) #&gt; [1] &quot;Jane saw a cat&quot; &quot;saw a cat&quot; &quot;a cat&quot; 指定分隔符 # Can define words by other separators str &lt;- &#39;abc.def..123.4568.999&#39; word(str, 1, sep = fixed(&#39;..&#39;)) #&gt; [1] &quot;abc.def&quot; word(str, 2, sep = fixed(&#39;..&#39;)) #&gt; [1] &quot;123.4568.999&quot; 4.2.3.10 其他函数 str_subset str_which str_subset()是对x[str_detect(x,pattern)]的包装，str_which()是which(str_detect(x,pattern))的包装。 fruit &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;pinapple&quot;) str_subset(fruit, &quot;a&quot;) #&gt; [1] &quot;apple&quot; &quot;banana&quot; &quot;pear&quot; &quot;pinapple&quot; # 匹配字符首次出现的位置 str_which(fruit, &quot;a&quot;) #&gt; [1] 1 2 3 4 匹配字符串本身做行筛选。 #筛选出字母行 set.seed(24) dt &lt;- data.table::data.table(col=sample(c(letters,1:10),100,replace = T)) head(dt[str_which(col,pattern = &#39;[a-z]&#39;)]) str_dup() str_dup()功能是复制字符串。 fruit &lt;- c(&quot;apple&quot;, &quot;pear&quot;, &quot;banana&quot;) str_dup(fruit, 2) str_dup(fruit, 1:3) str_c(&quot;ba&quot;, str_dup(&quot;na&quot;, 0:5)) str_starts() str_ends() 从str_detect()包装得到. str_starts(&#39;abd&#39;,&#39;a&#39;) #&gt; [1] TRUE str_detect(&#39;abd&#39;,&#39;^a&#39;) #&gt; [1] TRUE str_ends(&#39;abd&#39;,&#39;d&#39;) #&gt; [1] TRUE str_detect(&#39;abd&#39;,&#39;a$&#39;) #&gt; [1] FALSE 大小写转换 str_to_upper()函数将全部字符转换为大写，str_to_lower()函数将全部字符转换为小写，str_to_title()将每个单词的首字母转换为大写，str_to_sentence()将一个字符的首字母转换为大写。 dog &lt;- &quot;The quick brown dog&quot; str_to_upper(dog) #&gt; [1] &quot;THE QUICK BROWN DOG&quot; str_to_lower(dog) #&gt; [1] &quot;the quick brown dog&quot; str_to_title(dog) #&gt; [1] &quot;The Quick Brown Dog&quot; str_to_sentence(&quot;the quick brown dog&quot;) #&gt; [1] &quot;The quick brown dog&quot; "],["character-application.html", "4.3 综合运用", " 4.3 综合运用 4.3.1 实现excel函数 以下函数实现，仅仅只是从stringr包的函数上修改，并且没有完善，没有报错提示等的简陋版本，如果感兴趣的可以尝试利用Rcpp写出高性能版本的同功能函数。 left r_left &lt;- function(str,num){ str_sub(string = str,start = 1,end = num) } r_left(&#39;我是R语言学习者&#39;,3) #&gt; [1] &quot;我是R&quot; right r_right &lt;- function(str,num){ str_sub(string = str,start = str_length(str) - num + 1) } r_right(&#39;我是R语言学习者&#39;,3) #&gt; [1] &quot;学习者&quot; mid r_mid &lt;- function(str,start,num){ str_sub(string = str,start = start,end = start + num -1) } r_mid(&#39;我是R语言学习者&#39;,3,3) #&gt; [1] &quot;R语言&quot; 其余函数可以尝试自行实现。 4.3.2 使用案例 实际运用案例 合并 library(data.table) dt &lt;- data.table(col=rep(&#39;a&#39;,10),letters=letters[1:10]) dt[,newcol:=str_c(letters,collapse = &#39;|&#39;),by=.(col)][] #&gt; col letters newcol #&gt; 1: a a a|b|c|d|e|f|g|h|i|j #&gt; 2: a b a|b|c|d|e|f|g|h|i|j #&gt; 3: a c a|b|c|d|e|f|g|h|i|j #&gt; 4: a d a|b|c|d|e|f|g|h|i|j #&gt; 5: a e a|b|c|d|e|f|g|h|i|j #&gt; 6: a f a|b|c|d|e|f|g|h|i|j #&gt; 7: a g a|b|c|d|e|f|g|h|i|j #&gt; 8: a h a|b|c|d|e|f|g|h|i|j #&gt; 9: a i a|b|c|d|e|f|g|h|i|j #&gt; 10: a j a|b|c|d|e|f|g|h|i|j 拆解 #工作中路径需要拆解 类似商品品类路径 进口水果-热带水果-生鲜,用户行为路径等 dt &lt;- data.table(col=&#39;a&#39;,letters=str_c(letters[1:10],collapse = &#39;|&#39;)) my_str_split &lt;- function(x){ str_split(x,pattern = &quot;\\\\|&quot;) %&gt;% unlist() #str_split 拆解出来是列表 需要向量化 } dt[,list(newcol=my_str_split(letters)),by=.(col)] #&gt; col newcol #&gt; 1: a a #&gt; 2: a b #&gt; 3: a c #&gt; 4: a d #&gt; 5: a e #&gt; 6: a f #&gt; 7: a g #&gt; 8: a h #&gt; 9: a i #&gt; 10: a j "],["character-the-difference-stringr-and-base.html", "4.4 base 和 stringr", " 4.4 base 和 stringr 以下表格数据对比，主要是 base R 和 stringr 中相应字符处理功能函数对比。 表格数据来源stringr and base differences。表格数据可用以下代码获取(注意网络): library(tidyverse) library(rvest) dt &lt;- read_html(&#39;https://stringr.tidyverse.org/articles/from-base.html&#39;) %&gt;% html_table() %&gt;% `[[`(1) base stringr gregexpr(pattern, x) str_locate_all(x, pattern) grep(pattern, x, value = TRUE) str_subset(x, pattern) grep(pattern, x) str_which(x, pattern) grepl(pattern, x) str_detect(x, pattern) gsub(pattern, replacement, x) str_replace_all(x, pattern, replacement) nchar(x) str_length(x) order(x) str_order(x) regexec(pattern, x) + regmatches() str_match(x, pattern) regexpr(pattern, x) + regmatches() str_extract(x, pattern) regexpr(pattern, x) str_locate(x, pattern) sort(x) str_sort(x) strrep(x, n) str_dup(x, n) strsplit(x, pattern) str_split(x, pattern) strwrap(x) str_wrap(x) sub(pattern, replacement, x) str_replace(x, pattern, replacement) substr(x, start, end) str_sub(x, start, end) tolower(x) str_to_lower(x) tools::toTitleCase(x) str_to_title(x) toupper(x) str_to_upper(x) trimws(x) str_trim(x) 通过以上对比，方便我们从 Base R 切换到 stringr 包的使用。 "],["character-reference-material.html", "4.5 参考资料", " 4.5 参考资料 tidyverse-stringr:https://stringr.tidyverse.org/articles/from-base.html stringr vignettes:https://cran.r-project.org/web/packages/stringr/vignettes/stringr.html R new feature:https://www.r-bloggers.com/4-for-4-0-0-four-useful-new-features-in-r-4-0-0/ R-4.0.0 NEW features:https://cran.r-project.org/doc/manuals/r-devel/NEWS.html "]]
