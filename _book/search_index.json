[["数据导入导出.html", "2 数据导入导出", " 2 数据导入导出 作为一名普通的数据分析师，我日常接触最多的数据是业务系统中的销售订单表、商品库存表、会员信息表，门店信息表，商品信息表等之类的业务表，但最初接触R时，看到的演示代码以及数据集大部分都是R包中内置的数据集，没有很明确操作数据的意义，没有代入感。在刚开始学习使用R做数据处理后，我就想使用自己的数据集来操作数据，用R去实现Excel的透视表或sql功能。这时就首先需要将原始数据导入1R中。 现实生活中数据来源复杂，商业环境中数据源同样具有多样性，如SAP,不同的数据库、OA系统、EXCEL手工文件等;我们想要统一数据做分析，就需要将不同的数据源整合导入R中。 我们从读取方式简单区分为本地文件数据、数据库数据，本章主要说明常用的Excel文件和csv2、txt等文本文件的读写方式。关于数据库的数据的读取，可以参照后续database章节。 相信大家随便使用搜索引擎搜索诸如“将Excel导入R”的关键词都能得到一些行之有效的方法，但是不够系统全面。本章主要简述R中数据导入导出的相关R包，如readxl,writexl,openxlsx,readr, vroom等主要处理csv或Excel的R包。 当有其它数据格式需求的时候，那时候的你肯定已经会自行查找相关R包使用了。 在本章开始前，假定已经有一些R相关基础。如使用Rstudio查看导入的数据，R的数据结构等有一定认识。 由于R是将数据加载至内存中，故数据集大小超过内存大小将导入失败。 csv文件是也被称作平面文件，结构简单，平面文件比结构文件占用更少的空间；平面文件在数据仓库项目中广泛用于导入数据。 "],["readxl.html", "2.1 readxl", " 2.1 readxl readxl软件包使R获取Excel数据变得简洁。与现有的软件包(例如：xlsx)相比，readxl没有外部依赖性。容易在所有的操作系统安装使用。 readxl项目地址。本节大部分代码来源项目官网介绍，可自行查阅官网。 2.1.1 安装 从CRAN安装最新发行版本的最简单方法是安装整个tidyverse。 install.packages(&quot;tidyverse&quot;) 由于readxl不是tidyverse核心加载包，使用时任需要加载library(readxl) 或者是从CRAN仅安装readxl; install.packages(&quot;readxl&quot;) 从github安装开发版： # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/readxl&quot;) 2.1.2 用法 1.读取 readxl包中包含了几个示例文件，我们在接下来的案例中使用。 查看readxl包中自带xlsx文件 library(readxl) readxl_example() readxl_example(&quot;clippy.xls&quot;) read_excel()可读取xls和xlsx文件。 xlsx_example &lt;- readxl_example(&quot;datasets.xlsx&quot;) read_excel(xlsx_example) 通过函数excel_sheets()查看Excel的sheet名称 excel_sheets(xlsx_example) 指定worksheet的名字读取，可以是sheet的名字或序号。 当我们要读取的本地xlsx文件有多个sheets时，通过值定sheet参数读取指定的sheet。 read_excel(xlsx_example, sheet = &quot;chickwts&quot;) 读取xlsx文件的指定位置，有多种方法控制。本处提供几个案例，请?read_excel()查看帮助。 read_excel(path, sheet = NULL, range = NULL, col_names = TRUE, col_types = NULL, na = &quot;&quot;, trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max), progress = readxl_progress(), .name_repair = &quot;unique&quot;) range接受单元格范围，最简单的表示方式即Excle中单元格表示方法,如as range = “D12:F15” or range = “R1C12:R6C15”。 其余参数中，个人觉得col_types比较重要，可以指定列的类型。可用选项:“skip,” “guess,” “logical,” “numeric,” “date,” “text” or “list”。 .name_repair 参数能自动避免重复字段，可避免手工Excle出现的字段名不唯一的情况。 2.1.3 批量读取 某文件夹下有大量相同的Excel文件(sheet名称以及列字段相同)，要合并全部Excel数据,代码如下： allfiles &lt;- list.files(path = &#39;./data/&#39;,pattern = &#39;.xlsx$&#39;,full.names = T) purrr::map_dfr(allfiles,read_excel) 2.1.4 批量输出 我们按照一定条件拆解数据集，分别输出，代码如下： library(tidyverse) dt &lt;- read_xlsx(path = &#39;./data/read-write/批量读写.xlsx&#39;) dt %&gt;% group_by(name) %&gt;% group_walk(~ write.csv(.x,file = file.path(&#39;data/read-write&#39;,paste0(.y$name,&#39;.csv&#39;)))) list.files(path = &#39;data/read-write/&#39;) 暂时不用理解批量读取和输出的代码具体含义，可以先记住用法。 "],["writexl.html", "2.2 writexl", " 2.2 writexl writexl包目前的功能比较简单，仅有读写Excel功能，但优势是速度较快，尤其是写入Excel时。项目地址 2.2.1 用法 安装 install.packages(&quot;writexl&quot;) 参数 write_xlsx( x, path = tempfile(fileext = &quot;.xlsx&quot;), col_names = TRUE, format_headers = TRUE, use_zip64 = FALSE ) 输出Excel library(writexl) writexl::write_xlsx(iris,path = &#39;iris.xlsx&#39;) write_xlsx(list(mysheet1 = iris,mysheet2 = iris),path = &#39;iris.xlsx&#39;) 效率比较 library(microbenchmark) library(nycflights13) microbenchmark( writexl = writexl::write_xlsx(flights, tempfile()), openxlsx = openxlsx::write.xlsx(flights, tempfile()), times = 2 ) 其它功能 df &lt;- data.frame( name = c(&quot;UCLA&quot;, &quot;Berkeley&quot;, &quot;Jeroen&quot;), founded = c(1919, 1868, 2030), website = xl_hyperlink(c(&quot;http://www.ucla.edu&quot;, &quot;http://www.berkeley.edu&quot;, NA), &quot;homepage&quot;) ) df$age &lt;- xl_formula(&#39;=(YEAR(TODAY()) - INDIRECT(&quot;B&quot; &amp; ROW()))&#39;) write_xlsx(df, &#39;universities.xlsx&#39;) # cleanup unlink(&#39;universities.xlsx&#39;) "],["openxlsx.html", "2.3 openxlsx", " 2.3 openxlsx openxlsx是当我需要定制输出Excel表格或报表时常用R包。目前该包的版本4.2.3，通过使用Rcpp加速，包的读写速度在Excel的百万级下是可接受状态，包的相关函数功能完善且简易好用，并且正在积极开发中，相信它以后功能会越来越强大。 项目官方地址:https://ycphs.github.io/openxlsx/index.html 个人感觉主要优势： 不依赖java环境 读写速度可接受 可设置条件格式，与Excel中『开始』选项卡的条件格式功能接近 可批量插入ggplot2图 可插入公式 可渲染大部分Excel格式，并且效率相比部分python包高效 可添加页眉页脚以及其他格式，方便直接打印 功能稳定可用并且在积极开发中 版本信息查看 packageVersion(&quot;openxlsx&quot;) 本人公众号:宇飞的世界中有更加详细的阐述:https://mp.weixin.qq.com/s/ZD0dJb0y8fsWGI1dCPh2mQ 2.3.1 安装 稳定版 # 稳定版 install.packages(&quot;openxlsx&quot;, dependencies = TRUE, repos = &quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;) 开发版 install.packages(c(&quot;Rcpp&quot;, &quot;devtools&quot;), dependencies = TRUE) library(devtools) install_github(&quot;ycphs/openxlsx&quot;) 2.3.2 基础功能 本文仅呈现基础功能部分，即读写EXCEL文件。其它功能，请查阅项目官方地址或微信公众号文章R包-openxlsx-学习笔记 2.3.2.1 读取Excel read.xlsx()是读取函数，主要参数如下： library(openxlsx) read.xlsx( xlsxFile, sheet = 1, startRow = 1, colNames = TRUE, rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE, skipEmptyCols = TRUE, rows = NULL, cols = NULL, check.names = FALSE, sep.names = &quot;.&quot;, namedRegion = NULL, na.strings = &quot;NA&quot;, fillMergedCells = FALSE ) 以上参数中需要注意 ： detecDates参数，当你的Excel表格中带日期列时需要将参数设置为TRUE,不然将会把日期识别为数字读入。 fillMergedCells参数，当你读取的表格中存在合并单元格，将用值填充其他全部单元格,如下所示： read.xlsx(&#39;./test.xlsx&#39;,detectDates = TRUE,fillMergedCells = TRUE) 读取后如下所示： openxlsx-merge-xlsx readWorkbook()也可以读取Excel表格数据，参数与read.xlsx基本一致。 xlsxFile &lt;- system.file(&quot;extdata&quot;, &quot;readTest.xlsx&quot;, package = &quot;openxlsx&quot;) df1 &lt;- readWorkbook(xlsxFile = xlsxFile, sheet = 1) 2.3.2.2 写入Excel 我们将R中的数据有时候需要导出到Excle中，这时就利用函数将data.frame写入Excle。 write.xlsx()函数写入 write.xlsx(iris, file = &quot;writeXLSX1.xlsx&quot;, colNames = TRUE, borders = &quot;columns&quot;) 带格式输出 hs &lt;- createStyle( textDecoration = &quot;BOLD&quot;, fontColour = &quot;#FFFFFF&quot;, fontSize = 12, fontName = &quot;Arial Narrow&quot;, fgFill = &quot;#4F80BD&quot; ) ## Not run: write.xlsx(iris, file = &quot;writeXLSX3.xlsx&quot;, colNames = TRUE, borders = &quot;rows&quot;, headerStyle = hs ) 或者是用如下方式写入： 不带任何格式写入，共计四步。第一步创建workbook,第二步添加sheet,第三步写入数据，第四步保存workbook。 df &lt;- data.frame(a=1:10,b=1:10,d=1:10) wb &lt;- createWorkbook(creator = &#39;zhongyf&#39;,title = &#39;test&#39;) addWorksheet(wb,sheetName = &#39;test&#39;) writeData(wb,sheet = &#39;test&#39;,x = df) saveWorkbook(wb, &quot;test.xlsx&quot;, overwrite = TRUE) 2.3.3 带格式输出 我们以上面四步输出的方式举例，拆解其中四个函数的参数。 createWorkbook() addWorksheet() writeData() saveWorkbook() 首先看看包中自带的例子，我们分解其中的参数。 wb &lt;- createWorkbook(&quot;Fred&quot;) ## Add 3 worksheets addWorksheet(wb, &quot;Sheet 1&quot;) addWorksheet(wb, &quot;Sheet 2&quot;, gridLines = FALSE) addWorksheet(wb, &quot;Sheet 3&quot;, tabColour = &quot;red&quot;) addWorksheet(wb, &quot;Sheet 4&quot;, gridLines = FALSE, tabColour = &quot;#4F81BD&quot;) ## Headers and Footers addWorksheet(wb, &quot;Sheet 5&quot;, header = c(&quot;ODD HEAD LEFT&quot;, &quot;ODD HEAD CENTER&quot;, &quot;ODD HEAD RIGHT&quot;), footer = c(&quot;ODD FOOT RIGHT&quot;, &quot;ODD FOOT CENTER&quot;, &quot;ODD FOOT RIGHT&quot;), evenHeader = c(&quot;EVEN HEAD LEFT&quot;, &quot;EVEN HEAD CENTER&quot;, &quot;EVEN HEAD RIGHT&quot;), evenFooter = c(&quot;EVEN FOOT RIGHT&quot;, &quot;EVEN FOOT CENTER&quot;, &quot;EVEN FOOT RIGHT&quot;), firstHeader = c(&quot;TOP&quot;, &quot;OF FIRST&quot;, &quot;PAGE&quot;), firstFooter = c(&quot;BOTTOM&quot;, &quot;OF FIRST&quot;, &quot;PAGE&quot;) ) addWorksheet(wb, &quot;Sheet 6&quot;, header = c(&quot;&amp;[Date]&quot;, &quot;ALL HEAD CENTER 2&quot;, &quot;&amp;[Page] / &amp;[Pages]&quot;), footer = c(&quot;&amp;[Path]&amp;[File]&quot;, NA, &quot;&amp;[Tab]&quot;), firstHeader = c(NA, &quot;Center Header of First Page&quot;, NA), firstFooter = c(NA, &quot;Center Footer of First Page&quot;, NA) ) addWorksheet(wb, &quot;Sheet 7&quot;, header = c(&quot;ALL HEAD LEFT 2&quot;, &quot;ALL HEAD CENTER 2&quot;, &quot;ALL HEAD RIGHT 2&quot;), footer = c(&quot;ALL FOOT RIGHT 2&quot;, &quot;ALL FOOT CENTER 2&quot;, &quot;ALL FOOT RIGHT 2&quot;) ) addWorksheet(wb, &quot;Sheet 8&quot;, firstHeader = c(&quot;FIRST ONLY L&quot;, NA, &quot;FIRST ONLY R&quot;), firstFooter = c(&quot;FIRST ONLY L&quot;, NA, &quot;FIRST ONLY R&quot;) ) ## Need data on worksheet to see all headers and footers writeData(wb, sheet = 5, 1:400) writeData(wb, sheet = 6, 1:400) writeData(wb, sheet = 7, 1:400) writeData(wb, sheet = 8, 1:400) ## Save workbook ## Not run: saveWorkbook(wb, &quot;addWorksheetExample.xlsx&quot;, overwrite = TRUE) 2.3.4 基础函数 输出Excel的四步。createWorkbook，addWorksheet,writeDataTable,saveWorkbook四个函数的参数解释。 createWorkbook createWorkbook( creator = ifelse(.Platform$OS.type == &quot;windows&quot;, Sys.getenv(&quot;USERNAME&quot;), Sys.getenv(&quot;USER&quot;)), title = NULL, subject = NULL, category = NULL ) wb &lt;- createWorkbook( creator = &quot;宇飞的世界&quot;, title = &quot;标题&quot;, subject = &quot;主题&quot;, category = &quot;类别目录&quot; ) addWorksheet addWorksheet( wb, sheetName, gridLines = TRUE, tabColour = NULL, zoom = 100, header = NULL, footer = NULL, evenHeader = NULL, evenFooter = NULL, firstHeader = NULL, firstFooter = NULL, visible = TRUE, paperSize = getOption(&quot;openxlsx.paperSize&quot;, default = 9), orientation = getOption(&quot;openxlsx.orientation&quot;, default = &quot;portrait&quot;), vdpi = getOption(&quot;openxlsx.vdpi&quot;, default = getOption(&quot;openxlsx.dpi&quot;, default = 300)), hdpi = getOption(&quot;openxlsx.hdpi&quot;, default = getOption(&quot;openxlsx.dpi&quot;, default = 300)) ) gridLines参数：表格中是否有网格线，在Excle『视图』选项卡下面的网格线去除打勾的效果一致 tabColour参数：输出表格sheet标签颜色 zoom：发大缩小，默认是100，可选范围10-400 header:页眉 长度为3的字符向量，左、中、右三个位置，用Na可跳过一位置，以下页眉页脚相同。 footer: 页脚 evenHeader: 每页页眉 evenFooter: 每页页脚 firstHeader: 第一页页眉 firstFooter: 第一页页脚 visible:sheet是否隐藏，如果为否sheet将被隐藏 paperSize:页面大小,详见 ?pageSetup orientation:One of &quot;portrait&quot; or &quot;landscape&quot; 不清楚干嘛用 vdpi: 屏幕分辨率 默认值即可，不用调整 hdpi: 屏幕分辨率 默认值即可，不用调整 writeDataTable writeDataTable()函数将data.frame写入Excel。 wb:即createWorkbook()函数创建 saveWorkbook saveWorkbook(wb, file, overwrite = FALSE, returnValue = FALSE) 参数较为简单，wb即上文中的workbook对象，file即输出的文件名，overwrite即如果存在是否覆盖，returnValue如果设置为TRUE，返回TRUE代表保存成功 "],["readr.html", "2.4 readr", " 2.4 readr readr提供了一种快速友好的方式读取“矩形数据”(如：csv,tsv,fwf)，且当读取大型数据集时默认有进度条显示。 矩形数据，关系数据库中的单表就是矩形数据的一种。 csv Comma-Separated Values，逗号分隔值，分隔符也可是不是逗号。 csv文件是一种以纯文本形式存储的表格数据,可以通过记事本打开。与Excel不同的是，CSV是一种文本格式，不受Excel最大行数(1048576)限制。 如果对readr包不熟悉，可以直接阅读包作者大神Hadley Wickham的书R for data science 中data import chapter章节。 2.4.1 安装 直接通过安装tidyvese获取或单独安装readr。 # The easiest way to get readr is to install the whole tidyverse: install.packages(&quot;tidyverse&quot;) # Alternatively, install just readr: install.packages(&quot;readr&quot;) # Or the the development version from GitHub: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/readr&quot;) 2.4.2 用法 readr包是tidyverse系列的核心包，可以加载tidyverse使用。 library(tidyverse) 2.4.2.1 主要函数 readr支持七种read_功能的文件格式。 — read_csv():逗号分隔符文件 - read_tsv():制表符分割文件 - read_delim():规定分隔符文件 - read_fwf():固定宽度文件 - read_table():表格文件，列间用空格隔开 - read_log():Web日志文件 在大多数情况下，我们常使用read_csv()，提供文件路径，将得到数据表。示例如下: mtcars &lt;- read_csv(readr_example(&quot;mtcars.csv&quot;)) 通过上述输出反馈，我们可以知道读进去的数据集每列类型。如果发现不对可以通过col_types参数修改。大多数情况下，我们并不需要指定列的类型，readr会自动猜。 mtcars &lt;- read_csv(readr_example(&quot;mtcars.csv&quot;), col_types = cols( mpg = col_double(), cyl = col_integer(), disp = col_double(), hp = col_integer(), drat = col_double(), vs = col_integer(), wt = col_double(), qsec = col_double(), am = col_integer(), gear = col_integer(), carb = col_integer() ) ) 2.4.2.2 参数 read_csv()的参数如下： read_csv( file, col_names = TRUE, col_types = NULL, locale = default_locale(), na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max), progress = show_progress(), skip_empty_rows = TRUE ) col_types :指定列类型，可用项如下所示(含简写): c = character，i = integer，n = number，d = double，l = logical，f = factor，D = date，T = date time，t = time，默认值为guess. local:local参数是readr中很重要的一个参数，指定日期使用的月和日的名称，时区，字符编码，日期格式，数字的小数和点位数和分隔符。 locale()的第一个参数是date_names，控制月份和日期的名称，指定最简单的方式ISO 639 language code locale(&#39;zh&#39;) # 中文 locale(&#39;ja&#39;) #日本 locale(&#39;ko&#39;) #韩国 编码和时区问题是我们常面临的问题。 read_csv(readr_example(&quot;mtcars.csv&quot;),locale = locale(encoding = &#39;UTF-8&#39;,tz = &#39;Asia/Shanghai&#39;)) 详细信息查看手册vignette(\"locales\")。 2.4.3 导出功能 由于系统不同的缘故，在win系统下可能面临编码问题。我用readr导出数据时一般采用write_excel_csv()功能导出。 需要说明的是write_系列函数可以将输出文件压缩。 data(storms, package = &quot;dplyr&quot;) write_csv(storms, &quot;storms.csv&quot;) write_csv(storms, &quot;storms.csv.gz&quot;) 2.4.4 总结 大部分情况下，当数据整洁时且不涉及时间(日期不影响)时，采用默认参数读取数据即可。 当数据集前面行缺失值较多，readr自动猜数据列类型错误时，需要我们人为指定列类型；当编码时区等错误时，需指定locale()；以上是可能遇到的问题以及解决办法。 "],["vroom.html", "2.5 vroom", " 2.5 vroom vroom实现读取“矩形数据”到R中,如 comma separated(csv),tab separated(tsv), fixed width files(fwf)。该包的功能类似readr::read_csv(),data.table::fread()和read.csv(),但是对于许多数据集来说，vroom::vroom()读取速度会快得多。 vroom项目地址 2.5.1 安装 # 从cran安装 install.packages(&quot;vroom&quot;) # install.packages(&quot;devtools&quot;) devtools::install_dev(&quot;vroom&quot;) 2.5.2 用法 读取文件 library(vroom) file &lt;- vroom_example(&quot;mtcars.csv&quot;) file vroom(file) vroom(file, delim = &quot;,&quot;) 读取多文件 即vroom::vroom()具备迭代效果,具体情况如下： mt &lt;- tibble::rownames_to_column(mtcars, &quot;model&quot;) purrr::iwalk( split(mt, mt$cyl), ~ vroom_write(.x, glue::glue(&quot;mtcars_{.y}.csv&quot;), &quot;\\t&quot;) ) files &lt;- fs::dir_ls(glob = &quot;mtcars*csv&quot;) files # read_csv purrr::map_dfr(files,readr::read_delim,delim=&quot;\\t&quot;) # vroom same above vroom(files) 读取压缩文件 vroom支持zip,gz,bz2,xz等压缩文件，只需要将压缩文件名称传递给vroom即可。 file &lt;- vroom_example(&quot;mtcars.csv.gz&quot;) vroom(file) 读取网络文件 file &lt;- &quot;https://raw.githubusercontent.com/r-lib/vroom/master/inst/extdata/mtcars.csv&quot; vroom(file) 选择列读取 room提供了与dplyr::select()相同的列选择和重命名接口 file &lt;- vroom_example(&quot;mtcars.csv.gz&quot;) vroom(file, col_select = c(model, cyl, gear)) # vroom(file, col_select = c(1, 3, 11)) # vroom(file, col_select = list(car = model, everything())) "],["文件路径.html", "2.6 文件路径", " 2.6 文件路径 我们读取数据时都是读取某路径下的某文件，但是由于系统等原因，路径在不同系统下的表示方式不一致。 2.6.1 指定路径 win 路径 winOS系统：C:\\Users\\zhongyf\\Desktop\\Rbook，注意路径中是一个反斜杠()。 win-path 在R中读取时需要用一个正斜杠或两个反斜杠。 readr::read_csv(&#39;C:/Users/zhongyf/Desktop/Rbook/data/flights.csv&#39;) readr::read_csv(&#39;C:\\\\Users\\\\zhongyf\\\\Desktop\\\\Rbook\\\\data\\flights.csv&#39;) # same above readr:::read_csv(file = r&quot;(C:\\Users\\zhongyf\\Desktop\\Rbook\\data\\flights.csv)&quot;) # same above 工作中，当需要读取或写入共享盘3中文件时，路径表示方式为： the_shared_disk &lt;- r&quot;(\\\\192.168.2.117\\公司A-新\\01事业部\\)&quot; # load data into R readr::read_csv(file = &quot;\\\\\\\\192.168.2.117\\\\公司A-新\\\\01事业部\\\\flights.csv&quot;) readr::read_csv(file = r&quot;(\\\\192.168.2.117\\公司A-新\\01事业部\\)&quot;) r“()”用法是R-4.0-之后的特性。在win系统下表示路径特别有用 mac 路径 macOS系统: /User/vega_mac/Desktop/r,路径中是一个正斜杠。 mac-path readr::read_csv(&#39;/User/vega_mac/Desktop/r/Rbook/data/flights.csv&#39;) 2.6.2 默认路径 getwd()是查看当前工作目录的函数，在进行文件读写时的默认路径，也就是当没有明确指定路径时，读取导出的默认路径是getwd()。想要改变工作目录，通过设定setwd()即可。 getwd() # not run setwd(&#39;C:/Users/zhongyf/Desktop/Rbook/data&#39;) getwd() 共享盘的地址即某电脑上的地址，知道共享盘在局域网中的ip地址后在 开始-&gt;运行中输入\\192.168.1.247即可打开共享盘 "]]
