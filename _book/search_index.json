[["forcats.html", "6 因子介绍", " 6 因子介绍 我在实际工作中因子数据类型使用较少,forcats软件包用来处理因子,该软件包是tidyverse的一部分。 因子是用于对数据进行分类的R的一种数据类型。 它们可以存储字符串和整数.它们在具有有限数量的唯一值的列中很有用. 像“男性”，“女性”和True，False等。 本章节简单了解即可。 "],["forcats-introduction.html", "6.1 介绍", " 6.1 介绍 在 R 中 使用『因子1』处理具有固定已知的种类的变量，因子有助于字符向量重新排序获得较好的展示效果。 forcats包提供了一套工具，解决常见『因子』问题，包括更改级别以及值的顺序。 forcats 常用函数: fct_reorder(): 按照另一个变量重新排列因子 fct_infreq():按值得频率重新排列一个因素 fct_relevel(): 手动指定因子的顺序 fct_lump():将一个因素的最少/最频繁的值折叠成其他 关于forcats包，可以直接阅读 R for Data Science 的因子章节。本文大部分内容是从官方手册直译，案例照搬。 因子变量会占用更小内存空间，如下： object.size(rep(letters,100000)) #&gt; 20801504 bytes object.size(rep(forcats::as_factor(letters),100000)) #&gt; 10402096 bytes R-4.0 之后改变了字符默认为因子的方式 6.1.1 安装 由于forcats是tidyverse系列的核心包，可以直接安装tidyverse。 install.packages(&quot;tidyverse&quot;) # 从cran 安装 install.packages(&quot;forcats&quot;) # 安装开发版 devtools::install_github(&quot;tidyverse/forcats&quot;) 由于forcats包功能相对简单，本章节接下来仅介绍常用函数用法 R 中内置的一种数据结构，与向量，列表类似。↩︎ "],["forcats-usage.html", "6.2 用法", " 6.2 用法 主要介绍fct_reorder()，fct_infreq()，fct_relevel()等函数用法。 6.2.1 创建因子 使用 base R 中 factor函数创建因子。 x1 &lt;- c(&quot;c事业部&quot;,&quot;a事业部&quot;,&quot;b事业部&quot;) x2 &lt;- factor(x1) x3 &lt;- factor(x1,levels = x1) x2 #&gt; [1] c事业部 a事业部 b事业部 #&gt; Levels: a事业部 b事业部 c事业部 x3 #&gt; [1] c事业部 a事业部 b事业部 #&gt; Levels: c事业部 a事业部 b事业部 通过观察发现因子x2,x3的顺序不一致。在我们做报表的时候，可以利用这个特性给事业部或者是别的类似字段指定因子水平达到排序效果。 当某水平因子未指定时，会被替换成NA,如下所示： x4 &lt;- c(&quot;d事业部&quot;,&quot;a事业部&quot;,&quot;b事业部&quot;) factor(x1,levels = x4) #&gt; [1] &lt;NA&gt; a事业部 b事业部 #&gt; Levels: d事业部 a事业部 b事业部 创建因子想因子顺序和初始顺序一样，可以通过如下方式创建。 library(forcats) x1 &lt;- c(&quot;Dec&quot;, &quot;Apr&quot;, &quot;Jan&quot;, &quot;Mar&quot;) f2 &lt;- x1 %&gt;% factor() %&gt;% fct_inorder() 6.2.2 修改因子顺序 在我们作图时更改因子级别的顺序往往很有用，如下所示： library(tidyverse) #&gt; -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- #&gt; v ggplot2 3.3.3 v purrr 0.3.4 #&gt; v tibble 3.1.2 v dplyr 1.0.6 #&gt; v tidyr 1.1.3 v stringr 1.4.0 #&gt; v readr 1.4.0 #&gt; -- Conflicts ------------------------------------------ tidyverse_conflicts() -- #&gt; x dplyr::filter() masks stats::filter() #&gt; x dplyr::lag() masks stats::lag() relig_summary &lt;- gss_cat %&gt;% group_by(relig) %&gt;% summarise( age = mean(age, na.rm = TRUE), tvhours = mean(tvhours, na.rm = TRUE), n = n() ) ggplot(relig_summary, aes(tvhours, relig)) + geom_point() gss_cat 是 forcats 包自带数据集，展示的是宗教间每天看电视的平均小时数 根据绘制的图像，我们很难有效解释，因为图表是杂乱无序的。我们通过fct_reorder()重新指定因子水平使图表表达更加清晰。 ggplot(relig_summary, aes(tvhours, fct_reorder(relig, tvhours))) + geom_point() fct_reorder()三个参数： .f:你想要调整因子水平的因子或者是字符向量 .x:指定因子的水平 .fun:可选的，当一个x对应多个f时的聚合函数，默认是median df &lt;- tibble::tribble( ~color, ~a, ~b, &quot;blue&quot;, 1, 2, &quot;green&quot;, 6, 2, &quot;purple&quot;, 3, 3, &quot;red&quot;, 2, 3, &quot;yellow&quot;, 5, 1 ) df$color &lt;- factor(df$color) fct_reorder(df$color, df$a, min) #&gt; [1] blue green purple red yellow #&gt; Levels: blue red purple yellow green fct_reorder2(df$color, df$a, df$b) #&gt; [1] blue green purple red yellow #&gt; Levels: purple red blue green yellow 如果我们想看报告收入水平的平均年龄变化情况？ rincome_summary &lt;- gss_cat %&gt;% group_by(rincome) %&gt;% summarise( age = mean(age, na.rm = TRUE), tvhours = mean(tvhours, na.rm = TRUE), n = n() ) ggplot(rincome_summary, aes(age, fct_reorder(rincome, age))) + geom_point() 如果我们像之前一样更改收入的因子水平，但这并不是一个好的决定，因为收入在一般意义上已经有了顺序。但是，如果我们修改特殊的因子水平还是有意义的，如下： ggplot(rincome_summary, aes(age, fct_relevel(rincome, &quot;Not applicable&quot;))) + geom_point() fct_relevel()用法： f &lt;- factor(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), levels = c(&quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;a&quot;)) fct_relevel(f) #&gt; [1] a b c d #&gt; Levels: b c d a fct_relevel(f, &quot;a&quot;) #&gt; [1] a b c d #&gt; Levels: a b c d fct_relevel(f, &quot;b&quot;, &quot;a&quot;) #&gt; [1] a b c d #&gt; Levels: b a c d fct_relevel(f, &quot;a&quot;, after = 2) #&gt; [1] a b c d #&gt; Levels: b c a d fct_infreq()用法： gss_cat %&gt;% mutate(marital = marital %&gt;% fct_infreq() %&gt;% fct_rev()) %&gt;% ggplot(aes(marital)) + geom_bar() 该系列函数功能是改变因子水平。 fct_inorder(): 以第一次出现的顺序为顺序 fct_infreq():以每个因子出现的次数为顺序,数字大在前 fct_inseq():以级别的数字为顺序 f &lt;- factor(c(&quot;b&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;c&quot;)) f #&gt; [1] b b a c c c #&gt; Levels: a b c fct_inorder(f) #&gt; [1] b b a c c c #&gt; Levels: b a c fct_infreq(f) #&gt; [1] b b a c c c #&gt; Levels: c b a f &lt;- factor(1:3, levels = c(&quot;3&quot;, &quot;2&quot;, &quot;1&quot;)) f #&gt; [1] 1 2 3 #&gt; Levels: 3 2 1 fct_inseq(f) #&gt; [1] 1 2 3 #&gt; Levels: 1 2 3 6.2.3 修改因子级别 前面我们通过函数修改因子顺序，我们还可以更改因子的级别。 gss_cat %&gt;% mutate(partyid = fct_recode(partyid, &quot;Republican, strong&quot; = &quot;Strong republican&quot;, &quot;Republican, weak&quot; = &quot;Not str republican&quot;, &quot;Independent, near rep&quot; = &quot;Ind,near rep&quot;, &quot;Independent, near dem&quot; = &quot;Ind,near dem&quot;, &quot;Democrat, weak&quot; = &quot;Not str democrat&quot;, &quot;Democrat, strong&quot; = &quot;Strong democrat&quot; )) %&gt;% count(partyid) #&gt; # A tibble: 10 x 2 #&gt; partyid n #&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 No answer 154 #&gt; 2 Don&#39;t know 1 #&gt; 3 Other party 393 #&gt; 4 Republican, strong 2314 #&gt; 5 Republican, weak 3032 #&gt; 6 Independent, near rep 1791 #&gt; # ... with 4 more rows fct_recode()用法： x &lt;- factor(c(&quot;apple&quot;, &quot;bear&quot;, &quot;banana&quot;, &quot;dear&quot;)) fct_recode(x, fruit = &quot;apple&quot;, fruit = &quot;banana&quot;) #&gt; [1] fruit bear fruit dear #&gt; Levels: fruit bear dear x &lt;- factor(c(&quot;apple&quot;, &quot;bear&quot;, &quot;banana&quot;, &quot;dear&quot;)) levels &lt;- c(fruit = &quot;apple&quot;, fruit = &quot;banana&quot;) fct_recode(x, !!!levels) #&gt; [1] fruit bear fruit dear #&gt; Levels: fruit bear dear "]]
